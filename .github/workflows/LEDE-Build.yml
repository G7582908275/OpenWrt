# This is free software, lisence use MIT.
# Copyright (C) https://github.com/yfdoor

name: LEDE-Build

# 触发条件
on:
  #  push:
  #    branches:
  #      - master
  #    paths:
  #      - '.config'
  schedule:
     - cron: 0 0 2/3 * *
  watch:
     types: started

# 环境定义
env:
  #####################################################
  #####   1：编译官方源码
  #####   2：编译第三方源码
  #####   3：编译官方源码 & 第三方 Package
  #####################################################
  ## REPO_URL: https://github.com/openwrt/openwrt.git
  REPO_URL: https://github.com/coolsnowwolf/lede.git
  ## REPO_URL: https://github.com/Lienol/openwrt.git
  REPO_BRANCH: master
  CONF_FILE: x86_64
  DIY0_FILE: DIY0.sh
  DIY1_FILE: DIY1.sh
  PKG_LEAN: false
  PKG_LIENOL: true
  SSH_ACTION: false
  UPLOAD_BRANCH: true
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: true
  UPLOAD_WETRANSFER: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  #####################################################

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      # 项目初始
      - name: Code Checkout
        uses: actions/checkout@main

      # 初始环境
      - name: Initialize Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get update
          sudo -E apt-get -y install $(curl -fsSL git.io/depends-ubuntu)
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo timedatectl set-timezone "$TZ" 
          echo "======================="
          df -h
          echo "======================="

     # 下载源码
      - name: Clone Code
        run: |
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

     # 下载插件
      - name: Download Lean Package
        if: env.PKG_LEAN == 'true' && env.REPO_URL != 'https://github.com/coolsnowwolf/lede.git'
        run: |
          cd openwrt
          sudo rm -rf package/lean
          mkdir -p package/lean
          svn checkout https://github.com/coolsnowwolf/lede/trunk/package/lean/ package/lean
          sudo rm -rf package/lean/.svn/

          mkdir -p tools/ucl && wget -P tools/ucl https://raw.githubusercontent.com/coolsnowwolf/lede/master/tools/ucl/Makefile 
          mkdir -p tools/upx && wget -P tools/upx https://raw.githubusercontent.com/coolsnowwolf/lede/master/tools/upx/Makefile

          sed  -i '/tools-$(CONFIG_TARGET_orion_generic)/atools-y += ucl upx' tools/Makefile
          sed  -i '/dependencies/a\\$(curdir)/upx/compile := $(curdir)/ucl/compile' tools/Makefile

     # 下载插件
      - name: Download Lienol Package
        if: env.PKG_LIENOL == 'true' && env.REPO_URL != 'https://github.com/Lienol/openwrt.git'
        run: |
          cd openwrt
          echo "src-git yfdoor9 https://github.com/Lienol/openwrt-package" >> feeds.conf.default

      # 自定插件
      - name: Download My Package
        run: |
          chmod +x script/$DIY0_FILE
          cd openwrt
          ../script/$DIY0_FILE
          
      # 更新Feed
      - name: Update Feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
      # 配置文件
      - name: Config File
        run: |
          chmod +x script/$DIY1_FILE
          [ -e files ] && cp -r -f files openwrt/files
          [ -e config.d/$CONF_FILE ] && cp -r -f config.d/$CONF_FILE openwrt/.config
          chmod +x script/$DIY1_FILE
          cd openwrt
          ../script/$DIY1_FILE
          make defconfig

      # SSH连接
      - name: SSH Connection
        uses: P3TERX/ssh2actions@v1.0.0
        if: (env.SSH_ACTION == 'true' && github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      # 下载依赖
      - name: Make Download
        run: |
          cd openwrt
          make download -j8
          find dl/ -size -1024c -exec rm -f {} \;

      # 编译固件
      - name: Compile Firmware
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          echo "::set-output name=status::success"
          
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "RELEASE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

     # 更新分支
      - name: Upload Branch
        if: env.UPLOAD_BRANCH == 'true' && steps.compile.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          cd openwrt/bin
          zip -r OpenWrt_Packages.zip -s 100m packages
          zip -r OpenWrt_Targets.zip -s 100m targets
          git init
          git config user.name "yfdoor"
          git config user.email "yfdoor@github.com"
          git add .
          git commit -m "Update OpenWrt_"$CONF_FILE
          git push --force --quiet https://$GITHUB_TOKEN@github.com/yfdoor/OpenWrt.git HEAD:LEDE_$CONF_FILE
       
      # 上传 Bin
      - name: Upload Bin Directory
        uses: actions/upload-artifact@main
        if: env.UPLOAD_BIN_DIR == 'true' && steps.compile.outputs.status == 'success'
        with:
          name: OpenWrt_Bin${{ env.DEVICE_NAME }}${{ env.RELEASE_DATE }}
          path: ./openwrt/bin
          
      # 准备固件
      - name: Organize Firmware
        id: organize
        if: steps.compile.outputs.status == 'success' && !cancelled()
        run: |
          cd openwrt/bin
          find ./targets/ -type d -name "packages" | xargs rm -rf {}
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=status::success"
      
      # 上传固件
      - name: Upload Firmware
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        with:
          name: OpenWrt_Firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}
        
    # 上传CowTransfer
      - name: Upload to Cowtransfer
        id: cowtransfer
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
          echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
          echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"
        
      # 上传WeTransfer
      - name: Upload to WeTransfer
        id: wetransfer
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
          echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"
      
      # 生成发行
      - name: Generate Release
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success' && !cancelled()
        run: |
          echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
          touch release.txt
          [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
          [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
          echo "::set-output name=status::success"
          
      # 上传发行
      - name: Upload Release
        uses: softprops/action-gh-release@v1
        if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body: |
            1、本固件为自动编译
            2、发行版中只提供完整的固件
            3、需要单独IPK请到 Action 下载
            4、源码：${{ env.REPO_URL }}
            5、分支：${{ env.REPO_BRANCH }}
            6、Lean's package option：${{ env.PKG_LEAN }}
            7、Lienol's package option：${{ env.PKG_LIENOL }}
            -- Build by YFDOOR @ with Github Action on ${{ env.RELEASE_DATE }}
            -- Automated build | 自动编译
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*
